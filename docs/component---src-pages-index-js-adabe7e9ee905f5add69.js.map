{"version":3,"sources":["webpack:///./src/components/WebsiteCaption.js","webpack:///./src/components/panel-inputs/SliderInput.js","webpack:///./src/components/panel-inputs/NumberInput.js","webpack:///./src/components/GeneratorPanel.js","webpack:///./src/components/PixelShaderCanvas.js","webpack:///./src/components/RenderElement.js","webpack:///./src/components/App.js","webpack:///./src/pages/index.js","webpack:///./src/templates/layout.js","webpack:///./src/glsl/vert.glsl","webpack:///./src/glsl/frag.glsl"],"names":["Caption","render","react_default","a","createElement","Fragment","align","style","margin","href","React","Component","SliderInput","props","_this","_Component","call","this","state","value","dataTransform","x","defaultValue","min","_this2","_this$props","max","segmentation","name","id","type","onInput","e","target","setState","className","NumberInput","parseInt","Panel","_React$Component","sendInput","bind","_assertThisInitialized","onResolutionInput","onSeedInput","defaultParams","resPower","params","resolution","componentDidMount","seed","width","padding","SliderInput_SliderInput","Math","round","pow","NumberInput_NumberInput","PixelShaderCanvas","animate","PixelShaderCanvas_assertThisInitialized","scene","Scene","camera","OrthographicCamera","position","z","console","log","renderer","WebGLRenderer","canvas","setSize","texSize","shape","Shape","Vector2","geo","ShapeBufferGeometry","constructUniforms","material","ShaderMaterial","uniforms","vertexShader","vert","fragmentShader","frag","mesh","Mesh","add","domElement","height","display","start","initialScale","_i","_Object$entries","Object","entries","uniformValues","length","_Object$entries$_i","uniName","uniValue","setUniforms","_i2","_Object$entries2","_Object$entries2$_i","componentDidUpdate","frameId","requestAnimationFrame","renderScene","ref","canv","Renderer","inputParams","components_PixelShaderCanvas","App","windowWidth","windowHeight","handleInput","App_assertThisInitialized","updateSize","window","onresize","$","fadeIn","innerWidth","innerHeight","panelInput","fontSize","float","WebsiteCaption","components_GeneratorPanel","RenderElement","Page","layout","title","components_App","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_helmet__WEBPACK_IMPORTED_MODULE_1__","Layout","_ref","children","rel","module","exports"],"mappings":"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","file":"component---src-pages-index-js-adabe7e9ee905f5add69.js","sourcesContent":["import React from 'react'\n\nclass Caption extends React.Component {\n  render() {\n    return (<>\n      <h1 align='center' style={{margin:\"2% 0 0 0\"}}>Noise generation</h1>\n      <h4 align='center'>Made by <a href=\"https://xallt.github.io\">Xallt</a></h4>\n    </>)\n  }\n}\n\nexport default Caption","import React, { Component } from 'react'\n\nexport default class SliderInput extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            value: (props.dataTransform || ((x) => x))(props.defaultValue || props.min || 0)\n        }\n    }\n\n    render() {\n        var {min, max, segmentation, name, defaultValue, dataTransform} = this.props\n        segmentation = segmentation || 1\n        min = min || 0\n        defaultValue = defaultValue || min\n        dataTransform = dataTransform || ((x) => x)\n\n        return (<>\n            {name}: &nbsp;\n            <input id={\"i\" + name}\n                type=\"range\" \n                min={min * segmentation} max={max * segmentation} \n                onInput={(e) => {\n                    this.props.onInput(dataTransform(e.target.value / segmentation)) \n                    this.setState({value: dataTransform(e.target.value / segmentation)})\n                }} \n                defaultValue={defaultValue * segmentation}/>\n            &nbsp;<mark className=\"invert\">{this.state.value}</mark><br/>\n        </>)\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class NumberInput extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            value: props.defaultValue || 0\n        }\n    }\n\n    render() {\n        var {defaultValue, name} = this.props\n\n        defaultValue = defaultValue || 0\n\n        return (<>\n            {name}: &nbsp;\n            <input id={\"i\" + name}\n                type=\"number\" \n                onInput={(e) => {\n                    this.props.onInput(parseInt(e.target.value) || 0)\n                    this.setState({value: e.target.value})\n                }} \n                defaultValue={defaultValue}/>\n        </>)\n    }\n}\n","import React from 'react'\n\nimport '../styles/GeneratorPanel.css'\n\nimport SliderInput from './panel-inputs/SliderInput'\nimport NumberInput from './panel-inputs/NumberInput'\n\nclass Panel extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.sendInput = this.sendInput.bind(this)\n    this.onResolutionInput = this.onResolutionInput.bind(this)\n    this.onSeedInput = this.onSeedInput.bind(this)\n\n    // Default\n    this.defaultParams = {\n      resPower: 7000\n    }\n    this.params = {\n      resolution: 128\n    }\n  }\n\n  componentDidMount() {\n    this.sendInput()\n  }\n  \n\n  sendInput() {\n    this.props.onInput(this.params);\n  }\n\n  onResolutionInput(value) {\n    this.params.resolution = value\n    this.sendInput()\n  }\n\n  onSeedInput(value) {\n    this.params.seed = value\n    this.sendInput()\n  }\n\n  render() {\n    return (\n      <div style={{width: \"90%\", margin: \"1% auto\", padding:\"1%\"}}>\n        <SliderInput min={0} max={10} segmentation={1000} name=\"Resolution\" defaultValue={7} \n                     onInput={this.onResolutionInput} \n                     dataTransform={(x) => Math.round(2 ** x)}/>\n        <NumberInput defaultValue={0} name=\"Seed\" onInput={this.onSeedInput} />\n      </div>\n    )\n  }\n}\n\nexport default Panel","import React , {Component} from 'react'\nimport {Scene, OrthographicCamera, WebGLRenderer, Shape, Vector2, ShapeBufferGeometry, Mesh, ShaderMaterial} from 'three'\nimport vert from '../glsl/vert.glsl'\nimport frag from '../glsl/frag.glsl'\n\nclass PixelShaderCanvas extends Component {\n    constructor(props) {\n        super(props);\n\n        this.animate = this.animate.bind(this)\n    }\n    componentDidMount() {\n        this.scene = new Scene()\n        this.camera = new OrthographicCamera(-1, 1, 1, -1, 0.5, 100)\n        this.camera.position.z = 5\n        console.log(this.camera)\n        this.renderer = new WebGLRenderer({canvas: this.canvas})\n        this.renderer.setSize(this.props.texSize, this.props.texSize)\n        \n        this.shape = new Shape([\n            new Vector2(-1, -1),\n            new Vector2(-1, 1),\n            new Vector2(1, 1),\n            new Vector2(1, -1)\n        ])\n        this.geo = new ShapeBufferGeometry(this.shape)\n        this.constructUniforms()\n        this.material = new ShaderMaterial({\n            uniforms: this.uniforms,\n            vertexShader: vert,\n            fragmentShader: frag\n        })\n        this.mesh = new Mesh(this.geo, this.material)\n        this.scene.add(this.mesh)\n        console.log(this.scene)\n        this.renderer.domElement.style.height = \"100%\"\n        this.renderer.domElement.style.width = \"\"\n        this.renderer.domElement.style.margin = \"0 auto\"\n        this.renderer.domElement.style.display = \"block\"\n\n        this.start()\n    }\n    constructUniforms() {\n        this.uniforms = {}\n        this.uniforms.initialScale = {value:20.0}\n        for (const [uniName, uniValue] of Object.entries(this.props.uniformValues)) {\n            this.uniforms[uniName] = {value: uniValue}\n        }\n    }\n    setUniforms() {\n        this.uniforms.initialScale.value = 20.0\n        for (const [uniName, uniValue] of Object.entries(this.props.uniformValues)) {\n            this.uniforms[uniName].value = uniValue\n        }\n    }\n    componentDidUpdate() {\n        this.renderer.setSize(this.props.texSize, this.props.texSize)\n        this.renderer.domElement.style.height = \"100%\"\n        this.renderer.domElement.style.width = \"\"\n        this.setUniforms()\n    }\n    \n    start() {\n        if (!this.frameId) {\n            this.frameId = requestAnimationFrame(this.animate)\n        }\n    }\n    animate() {\n        this.renderScene()\n        this.frameId = requestAnimationFrame(this.animate)\n    }\n    renderScene() {\n        this.renderer.render(this.scene, this.camera)\n    }\n    render() {\n        return <canvas ref={(canv)=>{this.canvas = canv}} \n                    style={{height:\"100%\", display: \"block\", margin: \"0 auto\"}} \n                    width={this.props.texSize} \n                    height={this.props.texSize}/>\n    }\n}\n\nexport default PixelShaderCanvas","import React from 'react'\nimport PixelShaderCanvas from './PixelShaderCanvas'\n\nclass Renderer extends React.Component {\n  \n  render() {\n    const uniformValues = {\n      seed: this.props.inputParams.seed\n    }\n    return (\n      <PixelShaderCanvas texSize={this.props.inputParams.resolution} uniformValues={uniformValues} />\n    )\n  }\n}\n\n\nexport default Renderer","import React from 'react'\nimport $ from 'jquery'\n\nimport '../styles/App.css'\n\nimport WebsiteCaption from './WebsiteCaption'\nimport GeneratorPanel from './GeneratorPanel'\nimport RenderElement from './RenderElement'\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      windowWidth: 0,\n      windowHeight: 0,\n      inputParams: {}\n    }\n\n    this.handleInput = this.handleInput.bind(this);\n    this.updateSize = this.updateSize.bind(this)\n  }\n\n  componentDidMount() {\n    window.onresize = this.updateSize\n    this.updateSize()\n\n    $(() => {\n      $('html').fadeIn(500)\n    })\n  }\n\n  updateSize() {\n    this.setState({\n      windowWidth: window.innerWidth,\n      windowHeight: window.innerHeight\n    })\n  }\n\n  handleInput(panelInput) {\n    this.setState({\n      inputParams: panelInput\n    })\n  }\n\n  render() {\n    return (\n      <div style={{\n        margin: '0 auto',\n        width: this.state.windowWidth * .9,\n        height: Math.min(this.state.windowWidth * .5, this.state.windowHeight * .9),\n        fontSize: \"1.5vw\"\n      }}>\n        <div style={{height: '100%'}}>\n          <div style={{height: '100%', width:'30%', float:'left'}}>\n            <div style={{height: '20%'}}>\n              <WebsiteCaption/>\n            </div>\n            <div style={{height: '80%'}}>\n              <GeneratorPanel onInput={this.handleInput}/>\n            </div>\n          </div>\n          <div style={{height: '100%', width:'70%', float:'right'}}>\n            <RenderElement inputParams={this.state.inputParams}/>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App","import React from 'react'\n\nimport Layout from '../templates/layout'\nimport App from '../components/App'\n\nconst Page = () => (\n  <Layout title=\"Beginner's title\">\n    <App/>\n  </Layout>\n)\n\nexport default Page","import React from 'react'\nimport {Helmet} from 'react-helmet'\n\nimport '../styles/layout.css'\n\nconst Layout = ({children, title}) => (\n  <>\n    <Helmet>\n      <title>{title}</title>\n      <link rel=\"stylesheet\"></link>\n    </Helmet>\n    <main>{children}</main>\n  </>\n)\n\nexport default Layout;","module.exports = \"#define GLSLIFY 1\\nvarying vec2 vPos;\\n\\nvoid main() {\\n    gl_Position = vec4(position.xy, 0., 1.);\\n    vPos = position.xy / 2. + .5;\\n}\"","module.exports = \"#define GLSLIFY 1\\nvarying vec2 vPos;\\n\\nuniform float initialScale;\\nuniform float seed;\\n\\nfloat random(float x) {\\n    return fract(sin(x * 1238.412 + seed * 56.21) * 219.32 + .76 - seed * 89.1);\\n}\\nfloat random(vec2 p) {\\n    return random(random(p.x) * random(p.y) + random(p.x * p.y) - random(p.x - p.y) * 129.);\\n}\\n\\nfloat noise(vec2 p) {\\n    vec2 n = floor(p), f = fract(p);\\n    f = smoothstep(0., 1., f);\\n    float c = random(n + vec2(0., 1.)), d = random(n + vec2(1., 1.)),\\n          a = random(n + vec2(0., 0.)), b = random(n + vec2(1., 0.));\\n    return mix(mix(a, b, f.x), mix(c, d, f.x), f.y);\\n}\\n\\nvoid main() {\\n    // gl_FragColor = vec4(vec3(.1), 1.);\\n    gl_FragColor = vec4(vec3(noise(vPos * initialScale)), 1.);\\n}\""],"sourceRoot":""}