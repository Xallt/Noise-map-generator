{"version":3,"sources":["webpack:///./src/components/WebsiteCaption.js","webpack:///./src/components/panel-inputs/SliderInput.js","webpack:///./src/components/panel-inputs/RandomizerInput.js","webpack:///./src/components/panel-inputs/ChoiceInput.js","webpack:///./src/components/GeneratorPanel.js","webpack:///./src/components/PixelShaderCanvas.js","webpack:///./src/components/RenderElement.js","webpack:///./src/components/App.js","webpack:///./src/pages/index.js","webpack:///./src/templates/layout.js","webpack:///./src/glsl/vert.glsl","webpack:///./src/glsl/frag.glsl"],"names":["Caption","render","_this","this","react_default","a","createElement","ref","el","className","align","style","margin","href","React","Component","SliderInput","props","_Component","call","state","value","initialValue","min","_this2","_this$props","max","name","step","stepPrecision","toString","includes","split","length","segmentation","Math","pow","valueElem","padding","parseFloat","toFixed","hideValue","Fragment","display","type","onInput","e","target","setState","defaultValue","RandomizerInput","seed","buttons","onClick","ChoiceInput","options","_i","_Object$entries","Object","entries","_Object$entries$_i","key","push","onChange","Panel","_React$Component","sendInput","bind","_assertThisInitialized","onParamInput","params","resolution","octaves","gain","lacunarity","scale","dissolution","motionSteps","offsetScale","channels","componentDidMount","paramName","x","_this3","width","ChoiceInput_ChoiceInput","256x256","512x512","1024x1024","2048x2048","4096x4096","1","3","RandomizerInput_RandomizerInput","SliderInput_SliderInput","PixelShaderCanvas","scene","Scene","camera","OrthographicCamera","position","z","renderer","WebGLRenderer","canvas","setSize","texSize","shape","Shape","Vector2","geo","ShapeBufferGeometry","constructUniforms","material","ShaderMaterial","uniforms","vertexShader","vert","fragmentShader","frag","mesh","Mesh","add","domElement","height","uniformValues","uniName","uniValue","setUniforms","_i2","_Object$entries2","_Object$entries2$_i","componentDidUpdate","canv","Renderer","inputParams","components_PixelShaderCanvas","App","windowWidth","windowHeight","handleInput","App_assertThisInitialized","updateSize","window","onresize","$","fadeIn","innerWidth","innerHeight","panelInput","fontSize","float","WebsiteCaption","GeneratorPanel","RenderElement","Page","layout","title","components_App","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_helmet__WEBPACK_IMPORTED_MODULE_1__","Layout","_ref","children","rel","module","exports"],"mappings":"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","file":"component---src-pages-index-js-bcb4b8da8a61886d2bfe.js","sourcesContent":["import React from 'react'\n\nclass Caption extends React.Component {\n\n  render() {\n    return (\n      <div ref={(el) => {this.el = el}} className=\"fill text-autosize\">\n        <h1 align='center' style={{margin:\"4.5% 0 0 0\"}}>\n          Noise generation</h1>\n        <h4 align='center'>See on <a href=\"https://github.com/Xallt/Noise-map-generator\">Github</a></h4>\n      </div>\n    )\n  }\n}\n\nexport default Caption","import React, { Component } from 'react'\n\nimport '../../styles/slider.scss'\n\nexport default class SliderInput extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            value: (props.initialValue || props.min || 0)\n        }\n    }\n\n    render() {\n        var {min, max, name, step} = this.props\n        step = step || 1\n        min = min || 0\n\n        var stepPrecision = 0\n        if (step.toString().includes(\".\")) {\n            stepPrecision = step.toString().split(\".\")[1].length\n        }\n        const segmentation = 10 ** stepPrecision\n\n        var valueElem = <mark className=\"invert\" style={{margin: \"0 4%\", padding:\"0.3% 1.6%\"}}>\n            {parseFloat(parseFloat(this.state.value).toFixed(stepPrecision))}\n        </mark>\n        if (this.props.hideValue) {\n            valueElem = <></>\n        }\n        return (<>\n            {name}: &nbsp;\n            <div style={{display:\"inline-block\"}}>\n                <input type=\"range\"\n                       min={min * segmentation} max={max * segmentation}\n                       onInput={(e) => {\n                           this.props.onInput(e.target.value / segmentation)\n                           this.setState({value: e.target.value / segmentation})\n                       }}\n                       defaultValue={this.props.initialValue}\n                        />\n            </div>\n            {valueElem}\n            <br/>\n        </>)\n    }\n}\n","import React, { Component } from 'react'\n\nimport { Button } from '@blueprintjs/core'\n\nexport default class RandomizerInput extends Component {\n    constructor(props) {\n        super(props)\n\n        this.seed = 0\n    }\n\n    render() {\n        return (<>\n            {this.props.name}: &nbsp;\n            <Button onClick={(e) => {\n                this.props.onInput(++this.seed)\n            }}>\n                <h3 style={{margin: \"0.2vw\"}}>Randomize</h3>\n            </Button>\n            <br/>\n        </>)\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class ChoiceInput extends Component {\n\n    render() {\n        var options = []\n        for (let [key, value] of Object.entries(this.props.options)) {\n            options.push(<option value={value} key={key}>{key}</option>)\n        }\n        return (<>\n            {this.props.name}: &nbsp;\n            <div style={{margin:\"1% 0\", display: \"inline-block\"}} className=\"bp3-select\">\n                \n                <select onChange={(e) => {this.props.onInput(e.target.value)}}>\n                    {options}\n                </select>\n            </div>\n            <br/>\n        </>)\n    }\n}\n","import React from 'react'\n\nimport SliderInput from './panel-inputs/SliderInput'\nimport RandomizerInput from './panel-inputs/RandomizerInput'\nimport ChoiceInput from './panel-inputs/ChoiceInput'\n\nclass Panel extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.sendInput = this.sendInput.bind(this)\n    this.onParamInput = this.onParamInput.bind(this)\n    \n    this.params = {\n      resolution: 256,\n      octaves: 8,\n      seed: 0,\n      gain: 0.5,\n      lacunarity: 2.0,\n      scale: 3.0,\n      dissolution: 0.05,\n      motionSteps: 1,\n      offsetScale: 10.0,\n      channels: 1\n    }\n  }\n\n  componentDidMount() {\n    this.sendInput()\n  }\n  \n\n  sendInput() {\n    this.props.onInput(this.params);\n  }\n\n  onParamInput(paramName) {\n    return ((x) => {\n      this.params[paramName] = x\n      this.sendInput()\n    })\n  }\n\n  render() {\n    return (\n      <div ref={(el)=>{this.el = el}} style={{width: \"90%\", margin: \"1% auto\", padding:\"2%\"}} className=\"block-highlight\">\n        <ChoiceInput name=\"Resolution\"\n                     options={{\n                       \"256x256\": 256,\n                       \"512x512\": 512,\n                       \"1024x1024\": 1024,\n                       \"2048x2048\": 2048,\n                       \"4096x4096\": 4096\n                     }}\n                     onInput={this.onParamInput('resolution')}/>\n        <ChoiceInput name=\"Channels\"\n                     options={{\n                       \"1\": 1,\n                       \"3\": 3\n                     }}\n                     onInput={this.onParamInput('channels')}/>\n        <RandomizerInput name=\"Seed\"\n                     onInput={this.onParamInput('seed')}/>\n        \n        <hr/>\n        <SliderInput name=\"Octaves\" \n                     min={1} max={8} initialValue={8} \n                     onInput={this.onParamInput('octaves')}/>\n                     <hr/>\n        <SliderInput name=\"Scale\" \n                     min={1} max={30} step={0.01} initialValue={3.0}\n                     onInput={this.onParamInput('scale')}/>\n        <SliderInput name=\"Gain\" \n                     min={0} max={3} step={0.01} initialValue={0.5}\n                     onInput={this.onParamInput('gain')}/>\n        <SliderInput name=\"Lacunarity\" \n                     min={1} max={8} step={0.01} initialValue={2}\n                     onInput={this.onParamInput('lacunarity')}/>  \n        <hr/>\n        <h4 style={{margin:\"3% 0\"}} >Noise offsetting</h4>\n        <SliderInput name=\"Motion steps\" \n                     min={0} max={5} initialValue={1}\n                     onInput={this.onParamInput('motionSteps')}/>\n        <SliderInput name=\"Dissolution\" \n                     min={0.001} max={1} step={0.01} initialValue={0.05}\n                     onInput={this.onParamInput('dissolution')} hideValue={true}/>\n        <SliderInput name=\"Offset scale\" \n                     min={1} max={20} step={0.01} initialValue={10}\n                     onInput={this.onParamInput('offsetScale')} hideValue={true}/>\n      </div>\n    )\n  }\n}\n\nexport default Panel","import React , {Component} from 'react'\nimport {Scene, OrthographicCamera, WebGLRenderer, Shape, Vector2, ShapeBufferGeometry, Mesh, ShaderMaterial} from 'three'\nimport vert from '../glsl/vert.glsl'\nimport frag from '../glsl/frag.glsl'\n\nclass PixelShaderCanvas extends Component {\n    componentDidMount() {\n        this.scene = new Scene()\n        this.camera = new OrthographicCamera(-1, 1, 1, -1, 0.5, 100)\n        this.camera.position.z = 5\n        this.renderer = new WebGLRenderer({canvas: this.canvas})\n        this.renderer.setSize(this.props.texSize, this.props.texSize)\n        \n        this.shape = new Shape([\n            new Vector2(-1, -1),\n            new Vector2(-1, 1),\n            new Vector2(1, 1),\n            new Vector2(1, -1)\n        ])\n        this.geo = new ShapeBufferGeometry(this.shape)\n        this.constructUniforms()\n        this.material = new ShaderMaterial({\n            uniforms: this.uniforms,\n            vertexShader: vert,\n            fragmentShader: frag\n        })\n        this.mesh = new Mesh(this.geo, this.material)\n        this.scene.add(this.mesh)\n        this.renderer.domElement.style.height = \"100%\"\n        this.renderer.domElement.style.width = \"\"\n        this.renderer.domElement.style.margin = \"0 auto\"\n        this.renderer.domElement.style.display = \"block\"\n    }\n    constructUniforms() {\n        this.uniforms = {}\n        for (const [uniName, uniValue] of Object.entries(this.props.uniformValues)) {\n            this.uniforms[uniName] = {value: uniValue}\n        }\n    }\n    setUniforms() {\n        for (const [uniName, uniValue] of Object.entries(this.props.uniformValues)) {\n            this.uniforms[uniName].value = uniValue\n        }\n    }\n    componentDidUpdate() {\n        this.renderer.setSize(this.props.texSize, this.props.texSize)\n        this.renderer.domElement.style.height = \"100%\"\n        this.renderer.domElement.style.width = \"\"\n        this.setUniforms()\n        this.renderer.render(this.scene, this.camera)\n    }\n    render() {\n        return <canvas ref={(canv)=>{this.canvas = canv}} \n                    style={{height:\"100%\", display: \"block\", margin: \"0 auto\"}} \n                    width={this.props.texSize} \n                    height={this.props.texSize}/>\n    }\n}\n\nexport default PixelShaderCanvas","import React from 'react'\nimport PixelShaderCanvas from './PixelShaderCanvas'\n\nclass Renderer extends React.Component {\n  \n  render() {\n    const uniformValues = {\n      seed: this.props.inputParams.seed,\n      scale: this.props.inputParams.scale,\n      gain: this.props.inputParams.gain,\n      lacunarity: this.props.inputParams.lacunarity,\n      octaves: this.props.inputParams.octaves,\n      motionSteps: this.props.inputParams.motionSteps,\n      dissolution: this.props.inputParams.dissolution,\n      offsetScale: this.props.inputParams.offsetScale,\n      channels: this.props.inputParams.channels\n    }\n    return (\n      <PixelShaderCanvas texSize={512} uniformValues={uniformValues} />\n    )\n  }\n}\n\n\nexport default Renderer","import React from 'react'\nimport $ from 'jquery'\n\nimport '../styles/App.scss'\n\nimport WebsiteCaption from './WebsiteCaption'\nimport GeneratorPanel from './GeneratorPanel'\nimport RenderElement from './RenderElement'\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      windowWidth: 0,\n      windowHeight: 0,\n      inputParams: {}\n    }\n\n    this.handleInput = this.handleInput.bind(this);\n    this.updateSize = this.updateSize.bind(this)\n  }\n\n  componentDidMount() {\n    window.onresize = this.updateSize\n    this.updateSize()\n\n    $(() => {\n      $('html').fadeIn(500)\n    })\n  }\n\n  updateSize() {\n    this.setState({\n      windowWidth: window.innerWidth,\n      windowHeight: window.innerHeight\n    })\n  }\n\n  handleInput(panelInput) {\n    this.setState({\n      inputParams: panelInput\n    })\n  }\n\n  render() {\n    return (\n      <div style={{\n        margin: '0 auto',\n        width: this.state.windowWidth * .9,\n        height: Math.min(this.state.windowWidth * .5, this.state.windowHeight * .9),\n        fontSize: \"1.3vw\"\n      }}>\n        <div style={{height: '100%'}}>\n          <div style={{height: '100%', width:'30%', float:'left'}}>\n            <div style={{height: '20%'}} className=\"block-highlight\">\n              <WebsiteCaption/>\n            </div>\n            <div style={{height: '80%'}} className=\"block-highlight\">\n              <GeneratorPanel onInput={this.handleInput}/>\n            </div>\n          </div>\n          <div style={{height: '100%', width:'70%', float:'right'}} className=\"block-highlight\">\n            <RenderElement inputParams={this.state.inputParams}/>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App","import React from 'react'\n\nimport Layout from '../templates/layout'\nimport App from '../components/App'\n\nconst Page = () => (\n  <Layout title=\"Beginner's title\">\n    <App/>\n  </Layout>\n)\n\nexport default Page","import React from 'react'\nimport { Helmet } from 'react-helmet'\n\nimport '../styles/layout.scss'\n\nimport \"normalize.css\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\n\nconst Layout = ({children, title}) => (\n  <>\n    <Helmet>\n      <title>{title}</title>\n      <link rel=\"stylesheet\"></link>\n    </Helmet>\n    <main>{children}</main>\n  </>\n)\n\nexport default Layout;","module.exports = \"#define GLSLIFY 1\\nvarying vec2 vPos;\\n\\nvoid main() {\\n    gl_Position = vec4(position.xy, 0., 1.);\\n    vPos = position.xy / 2. + .5;\\n}\"","module.exports = \"#define GLSLIFY 1\\nvarying vec2 vPos;\\n\\nuniform float seed;\\n\\n#define MAX_OCTAVES 20\\n\\nuniform float scale;\\nuniform float gain, lacunarity, dissolution, offsetScale;\\nuniform int octaves, motionSteps, channels;\\n\\nfloat random(float x) {\\n    return fract(sin(x * 1238.412 + seed * 56.21) * 219.32 + .76 - seed * 89.1);\\n}\\nfloat random(vec2 p) {\\n    return random(random(p.x) * random(p.y) + random(p.x * p.y) - random(p.x - p.y) * 129.);\\n}\\n\\nvec2 rotate(vec2 p, float a) {\\n    return vec2(\\n        p.x * cos(a) - p.y * sin(a),\\n        p.x * sin(a) + p.y * cos(a)\\n    );\\n}\\n\\n// Perlin noise\\nfloat noise(vec2 p) {\\n    vec2 n = floor(p), f = fract(p);\\n    f = smoothstep(0., 1., f);\\n    float c = random(n + vec2(0., 1.)), d = random(n + vec2(1., 1.)),\\n          a = random(n + vec2(0., 0.)), b = random(n + vec2(1., 0.));\\n    return mix(mix(a, b, f.x), mix(c, d, f.x), f.y);\\n}\\n\\n// Fractional brownian motion\\nfloat fbm(vec2 st) {\\n    float res = 0.;\\n    float amplitude = 1.;\\n    st = st * scale;\\n    for (int i = 0; i < MAX_OCTAVES; ++i) {\\n        if (i >= octaves) {\\n            break;\\n        }\\n        res += amplitude * noise(rotate(st, 5.12 * float(i)));\\n        amplitude *= gain;\\n        st *= lacunarity;\\n    }\\n    if (gain == 1.) {\\n        res = res / float(octaves);\\n    }\\n    else {\\n        res = res * (gain - 1.) / (pow(gain, float(octaves)) - 1.); \\n    }\\n    return res;\\n}\\n\\nfloat offsetNoise(vec2 st) {\\n    vec2 ost = st * offsetScale;\\n    for (int i = 0; i < 10; ++i) {\\n        if (i >= motionSteps) {\\n            break;\\n        }\\n        float r_a = random(float(i)) - .5, r_B = random(r_a) * 100. - 50., r_C = random(r_B) * 100. - 50., \\n              r_d = random(r_C)  - .5, r_E = random(r_d) * 100. - 50., r_F = random(r_E) * 100. - 50.;\\n        vec2 offset = vec2(fbm(vec2(ost.y * r_a + r_B, ost.x * r_a + r_C)), fbm(vec2(ost.y * r_d + r_E, ost.x * r_d + r_F)));\\n        st = st + offset * dissolution;\\n    }\\n    return fbm(st);\\n}\\n\\nvoid main() {\\n    if (channels == 1) {\\n        float r = offsetNoise(vPos), \\n              g = r, \\n              b = r;\\n        gl_FragColor = vec4(r, g, b, 1.);\\n    }\\n    else if (channels == 2) {\\n        float r = offsetNoise(vPos), \\n              g = offsetNoise(rotate(vPos, 45.) + vec2(617., 213.)), \\n              b = (r + g) / 2.;\\n        gl_FragColor = vec4(r, g, b, 1.);\\n    }\\n    else if (channels == 3) {\\n        float r = offsetNoise(vPos), \\n              g = offsetNoise(rotate(vPos, 45.) + vec2(617., 213.)), \\n              b = offsetNoise(rotate(vPos, 30.) - vec2(617., 213.));\\n        gl_FragColor = vec4(r, g, b, 1.);\\n    }\\n}\""],"sourceRoot":""}